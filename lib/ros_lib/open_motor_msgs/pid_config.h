// Generated by gencpp from file open_motor_msgs/pid_config.msg
// DO NOT EDIT!


#ifndef OPEN_MOTOR_MSGS_MESSAGE_PID_CONFIG_H
#define OPEN_MOTOR_MSGS_MESSAGE_PID_CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_motor_msgs
{
template <class ContainerAllocator>
struct pid_config_
{
  typedef pid_config_<ContainerAllocator> Type;

  pid_config_()
    : update(false)
    , kP_pos(0.0)
    , kI_pos(0.0)
    , kD_pos(0.0)
    , pid_update_position(0.0)
    , kP_vel(0.0)
    , kI_vel(0.0)
    , kD_vel(0.0)  {
    }
  pid_config_(const ContainerAllocator& _alloc)
    : update(false)
    , kP_pos(0.0)
    , kI_pos(0.0)
    , kD_pos(0.0)
    , pid_update_position(0.0)
    , kP_vel(0.0)
    , kI_vel(0.0)
    , kD_vel(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _update_type;
  _update_type update;

   typedef float _kP_pos_type;
  _kP_pos_type kP_pos;

   typedef float _kI_pos_type;
  _kI_pos_type kI_pos;

   typedef float _kD_pos_type;
  _kD_pos_type kD_pos;

   typedef float _pid_update_position_type;
  _pid_update_position_type pid_update_position;

   typedef float _kP_vel_type;
  _kP_vel_type kP_vel;

   typedef float _kI_vel_type;
  _kI_vel_type kI_vel;

   typedef float _kD_vel_type;
  _kD_vel_type kD_vel;





  typedef boost::shared_ptr< ::open_motor_msgs::pid_config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_motor_msgs::pid_config_<ContainerAllocator> const> ConstPtr;

}; // struct pid_config_

typedef ::open_motor_msgs::pid_config_<std::allocator<void> > pid_config;

typedef boost::shared_ptr< ::open_motor_msgs::pid_config > pid_configPtr;
typedef boost::shared_ptr< ::open_motor_msgs::pid_config const> pid_configConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_motor_msgs::pid_config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_motor_msgs::pid_config_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_motor_msgs::pid_config_<ContainerAllocator1> & lhs, const ::open_motor_msgs::pid_config_<ContainerAllocator2> & rhs)
{
  return lhs.update == rhs.update &&
    lhs.kP_pos == rhs.kP_pos &&
    lhs.kI_pos == rhs.kI_pos &&
    lhs.kD_pos == rhs.kD_pos &&
    lhs.pid_update_position == rhs.pid_update_position &&
    lhs.kP_vel == rhs.kP_vel &&
    lhs.kI_vel == rhs.kI_vel &&
    lhs.kD_vel == rhs.kD_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_motor_msgs::pid_config_<ContainerAllocator1> & lhs, const ::open_motor_msgs::pid_config_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_motor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_motor_msgs::pid_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_motor_msgs::pid_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_motor_msgs::pid_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_motor_msgs::pid_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_motor_msgs::pid_config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_motor_msgs::pid_config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_motor_msgs::pid_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e86fc9db45258146486378e7e8c8682c";
  }

  static const char* value(const ::open_motor_msgs::pid_config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe86fc9db45258146ULL;
  static const uint64_t static_value2 = 0x486378e7e8c8682cULL;
};

template<class ContainerAllocator>
struct DataType< ::open_motor_msgs::pid_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_motor_msgs/pid_config";
  }

  static const char* value(const ::open_motor_msgs::pid_config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_motor_msgs::pid_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool update\n"
"\n"
"float32 kP_pos\n"
"float32 kI_pos\n"
"float32 kD_pos\n"
"float32 pid_update_position\n"
"\n"
"\n"
"float32 kP_vel\n"
"float32 kI_vel\n"
"float32 kD_vel\n"
;
  }

  static const char* value(const ::open_motor_msgs::pid_config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_motor_msgs::pid_config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.update);
      stream.next(m.kP_pos);
      stream.next(m.kI_pos);
      stream.next(m.kD_pos);
      stream.next(m.pid_update_position);
      stream.next(m.kP_vel);
      stream.next(m.kI_vel);
      stream.next(m.kD_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_motor_msgs::pid_config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_motor_msgs::pid_config_<ContainerAllocator>& v)
  {
    s << indent << "update: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update);
    s << indent << "kP_pos: ";
    Printer<float>::stream(s, indent + "  ", v.kP_pos);
    s << indent << "kI_pos: ";
    Printer<float>::stream(s, indent + "  ", v.kI_pos);
    s << indent << "kD_pos: ";
    Printer<float>::stream(s, indent + "  ", v.kD_pos);
    s << indent << "pid_update_position: ";
    Printer<float>::stream(s, indent + "  ", v.pid_update_position);
    s << indent << "kP_vel: ";
    Printer<float>::stream(s, indent + "  ", v.kP_vel);
    s << indent << "kI_vel: ";
    Printer<float>::stream(s, indent + "  ", v.kI_vel);
    s << indent << "kD_vel: ";
    Printer<float>::stream(s, indent + "  ", v.kD_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_MOTOR_MSGS_MESSAGE_PID_CONFIG_H
