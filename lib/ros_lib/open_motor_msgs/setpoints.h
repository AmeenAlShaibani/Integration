// Generated by gencpp from file open_motor_msgs/setpoints.msg
// DO NOT EDIT!


#ifndef OPEN_MOTOR_MSGS_MESSAGE_SETPOINTS_H
#define OPEN_MOTOR_MSGS_MESSAGE_SETPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_motor_msgs
{
template <class ContainerAllocator>
struct setpoints_
{
  typedef setpoints_<ContainerAllocator> Type;

  setpoints_()
    : position_setpoint()
    , velocity_setpoint()  {
      position_setpoint.assign(0);

      velocity_setpoint.assign(0.0);
  }
  setpoints_(const ContainerAllocator& _alloc)
    : position_setpoint()
    , velocity_setpoint()  {
  (void)_alloc;
      position_setpoint.assign(0);

      velocity_setpoint.assign(0.0);
  }



   typedef boost::array<int32_t, 4>  _position_setpoint_type;
  _position_setpoint_type position_setpoint;

   typedef boost::array<float, 4>  _velocity_setpoint_type;
  _velocity_setpoint_type velocity_setpoint;





  typedef boost::shared_ptr< ::open_motor_msgs::setpoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_motor_msgs::setpoints_<ContainerAllocator> const> ConstPtr;

}; // struct setpoints_

typedef ::open_motor_msgs::setpoints_<std::allocator<void> > setpoints;

typedef boost::shared_ptr< ::open_motor_msgs::setpoints > setpointsPtr;
typedef boost::shared_ptr< ::open_motor_msgs::setpoints const> setpointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_motor_msgs::setpoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_motor_msgs::setpoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_motor_msgs::setpoints_<ContainerAllocator1> & lhs, const ::open_motor_msgs::setpoints_<ContainerAllocator2> & rhs)
{
  return lhs.position_setpoint == rhs.position_setpoint &&
    lhs.velocity_setpoint == rhs.velocity_setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_motor_msgs::setpoints_<ContainerAllocator1> & lhs, const ::open_motor_msgs::setpoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_motor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_motor_msgs::setpoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_motor_msgs::setpoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_motor_msgs::setpoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_motor_msgs::setpoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_motor_msgs::setpoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_motor_msgs::setpoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_motor_msgs::setpoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a646d217d696096da4d43d867d13c8b";
  }

  static const char* value(const ::open_motor_msgs::setpoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a646d217d696096ULL;
  static const uint64_t static_value2 = 0xda4d43d867d13c8bULL;
};

template<class ContainerAllocator>
struct DataType< ::open_motor_msgs::setpoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_motor_msgs/setpoints";
  }

  static const char* value(const ::open_motor_msgs::setpoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_motor_msgs::setpoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Header header\n"
"int32[4] position_setpoint\n"
"float32[4] velocity_setpoint\n"
"\n"
"\n"
;
  }

  static const char* value(const ::open_motor_msgs::setpoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_motor_msgs::setpoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_setpoint);
      stream.next(m.velocity_setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct setpoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_motor_msgs::setpoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_motor_msgs::setpoints_<ContainerAllocator>& v)
  {
    s << indent << "position_setpoint[]" << std::endl;
    for (size_t i = 0; i < v.position_setpoint.size(); ++i)
    {
      s << indent << "  position_setpoint[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position_setpoint[i]);
    }
    s << indent << "velocity_setpoint[]" << std::endl;
    for (size_t i = 0; i < v.velocity_setpoint.size(); ++i)
    {
      s << indent << "  velocity_setpoint[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_setpoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_MOTOR_MSGS_MESSAGE_SETPOINTS_H
